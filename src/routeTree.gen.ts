/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as PublicRouteImport } from "./routes/_public";
import { Route as PrivateRouteImport } from "./routes/_private";
import { Route as PublicIndexRouteImport } from "./routes/_public/index";
import { Route as PublicResultsRouteImport } from "./routes/_public/results";
import { Route as PublicDriversRouteImport } from "./routes/_public/drivers";
import { Route as PublicChampionshipsRouteImport } from "./routes/_public/championships";
import { Route as PrivateAdminIndexRouteImport } from "./routes/_private/admin/index";
import { Route as PrivateAdminLoginRouteImport } from "./routes/_private/admin/login";
import { Route as PrivateAdminDashboardRouteImport } from "./routes/_private/admin/dashboard";
import { Route as PrivateAdminDriverIndexRouteImport } from "./routes/_private/admin/driver/index";
import { Route as PrivateAdminChampionshipIndexRouteImport } from "./routes/_private/admin/championship/index";
import { Route as PrivateAdminDriverRegisterRouteImport } from "./routes/_private/admin/driver/register";
import { Route as PrivateAdminChampionshipRegisterRouteImport } from "./routes/_private/admin/championship/register";
import { Route as PrivateAdminChampionshipIdRouteImport } from "./routes/_private/admin/championship/$id";

const PublicRoute = PublicRouteImport.update({
  id: "/_public",
  getParentRoute: () => rootRouteImport,
} as any);
const PrivateRoute = PrivateRouteImport.update({
  id: "/_private",
  getParentRoute: () => rootRouteImport,
} as any);
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => PublicRoute,
} as any);
const PublicResultsRoute = PublicResultsRouteImport.update({
  id: "/results",
  path: "/results",
  getParentRoute: () => PublicRoute,
} as any);
const PublicDriversRoute = PublicDriversRouteImport.update({
  id: "/drivers",
  path: "/drivers",
  getParentRoute: () => PublicRoute,
} as any);
const PublicChampionshipsRoute = PublicChampionshipsRouteImport.update({
  id: "/championships",
  path: "/championships",
  getParentRoute: () => PublicRoute,
} as any);
const PrivateAdminIndexRoute = PrivateAdminIndexRouteImport.update({
  id: "/admin/",
  path: "/admin/",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateAdminLoginRoute = PrivateAdminLoginRouteImport.update({
  id: "/admin/login",
  path: "/admin/login",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateAdminDashboardRoute = PrivateAdminDashboardRouteImport.update({
  id: "/admin/dashboard",
  path: "/admin/dashboard",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateAdminDriverIndexRoute = PrivateAdminDriverIndexRouteImport.update({
  id: "/admin/driver/",
  path: "/admin/driver/",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateAdminChampionshipIndexRoute =
  PrivateAdminChampionshipIndexRouteImport.update({
    id: "/admin/championship/",
    path: "/admin/championship/",
    getParentRoute: () => PrivateRoute,
  } as any);
const PrivateAdminDriverRegisterRoute =
  PrivateAdminDriverRegisterRouteImport.update({
    id: "/admin/driver/register",
    path: "/admin/driver/register",
    getParentRoute: () => PrivateRoute,
  } as any);
const PrivateAdminChampionshipRegisterRoute =
  PrivateAdminChampionshipRegisterRouteImport.update({
    id: "/admin/championship/register",
    path: "/admin/championship/register",
    getParentRoute: () => PrivateRoute,
  } as any);
const PrivateAdminChampionshipIdRoute =
  PrivateAdminChampionshipIdRouteImport.update({
    id: "/admin/championship/$id",
    path: "/admin/championship/$id",
    getParentRoute: () => PrivateRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/championships": typeof PublicChampionshipsRoute;
  "/drivers": typeof PublicDriversRoute;
  "/results": typeof PublicResultsRoute;
  "/": typeof PublicIndexRoute;
  "/admin/dashboard": typeof PrivateAdminDashboardRoute;
  "/admin/login": typeof PrivateAdminLoginRoute;
  "/admin": typeof PrivateAdminIndexRoute;
  "/admin/championship/$id": typeof PrivateAdminChampionshipIdRoute;
  "/admin/championship/register": typeof PrivateAdminChampionshipRegisterRoute;
  "/admin/driver/register": typeof PrivateAdminDriverRegisterRoute;
  "/admin/championship": typeof PrivateAdminChampionshipIndexRoute;
  "/admin/driver": typeof PrivateAdminDriverIndexRoute;
}
export interface FileRoutesByTo {
  "/championships": typeof PublicChampionshipsRoute;
  "/drivers": typeof PublicDriversRoute;
  "/results": typeof PublicResultsRoute;
  "/": typeof PublicIndexRoute;
  "/admin/dashboard": typeof PrivateAdminDashboardRoute;
  "/admin/login": typeof PrivateAdminLoginRoute;
  "/admin": typeof PrivateAdminIndexRoute;
  "/admin/championship/$id": typeof PrivateAdminChampionshipIdRoute;
  "/admin/championship/register": typeof PrivateAdminChampionshipRegisterRoute;
  "/admin/driver/register": typeof PrivateAdminDriverRegisterRoute;
  "/admin/championship": typeof PrivateAdminChampionshipIndexRoute;
  "/admin/driver": typeof PrivateAdminDriverIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_private": typeof PrivateRouteWithChildren;
  "/_public": typeof PublicRouteWithChildren;
  "/_public/championships": typeof PublicChampionshipsRoute;
  "/_public/drivers": typeof PublicDriversRoute;
  "/_public/results": typeof PublicResultsRoute;
  "/_public/": typeof PublicIndexRoute;
  "/_private/admin/dashboard": typeof PrivateAdminDashboardRoute;
  "/_private/admin/login": typeof PrivateAdminLoginRoute;
  "/_private/admin/": typeof PrivateAdminIndexRoute;
  "/_private/admin/championship/$id": typeof PrivateAdminChampionshipIdRoute;
  "/_private/admin/championship/register": typeof PrivateAdminChampionshipRegisterRoute;
  "/_private/admin/driver/register": typeof PrivateAdminDriverRegisterRoute;
  "/_private/admin/championship/": typeof PrivateAdminChampionshipIndexRoute;
  "/_private/admin/driver/": typeof PrivateAdminDriverIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/championships"
    | "/drivers"
    | "/results"
    | "/"
    | "/admin/dashboard"
    | "/admin/login"
    | "/admin"
    | "/admin/championship/$id"
    | "/admin/championship/register"
    | "/admin/driver/register"
    | "/admin/championship"
    | "/admin/driver";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/championships"
    | "/drivers"
    | "/results"
    | "/"
    | "/admin/dashboard"
    | "/admin/login"
    | "/admin"
    | "/admin/championship/$id"
    | "/admin/championship/register"
    | "/admin/driver/register"
    | "/admin/championship"
    | "/admin/driver";
  id:
    | "__root__"
    | "/_private"
    | "/_public"
    | "/_public/championships"
    | "/_public/drivers"
    | "/_public/results"
    | "/_public/"
    | "/_private/admin/dashboard"
    | "/_private/admin/login"
    | "/_private/admin/"
    | "/_private/admin/championship/$id"
    | "/_private/admin/championship/register"
    | "/_private/admin/driver/register"
    | "/_private/admin/championship/"
    | "/_private/admin/driver/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren;
  PublicRoute: typeof PublicRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_public": {
      id: "/_public";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PublicRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_private": {
      id: "/_private";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PrivateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_public/": {
      id: "/_public/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof PublicIndexRouteImport;
      parentRoute: typeof PublicRoute;
    };
    "/_public/results": {
      id: "/_public/results";
      path: "/results";
      fullPath: "/results";
      preLoaderRoute: typeof PublicResultsRouteImport;
      parentRoute: typeof PublicRoute;
    };
    "/_public/drivers": {
      id: "/_public/drivers";
      path: "/drivers";
      fullPath: "/drivers";
      preLoaderRoute: typeof PublicDriversRouteImport;
      parentRoute: typeof PublicRoute;
    };
    "/_public/championships": {
      id: "/_public/championships";
      path: "/championships";
      fullPath: "/championships";
      preLoaderRoute: typeof PublicChampionshipsRouteImport;
      parentRoute: typeof PublicRoute;
    };
    "/_private/admin/": {
      id: "/_private/admin/";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof PrivateAdminIndexRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/login": {
      id: "/_private/admin/login";
      path: "/admin/login";
      fullPath: "/admin/login";
      preLoaderRoute: typeof PrivateAdminLoginRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/dashboard": {
      id: "/_private/admin/dashboard";
      path: "/admin/dashboard";
      fullPath: "/admin/dashboard";
      preLoaderRoute: typeof PrivateAdminDashboardRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/driver/": {
      id: "/_private/admin/driver/";
      path: "/admin/driver";
      fullPath: "/admin/driver";
      preLoaderRoute: typeof PrivateAdminDriverIndexRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/championship/": {
      id: "/_private/admin/championship/";
      path: "/admin/championship";
      fullPath: "/admin/championship";
      preLoaderRoute: typeof PrivateAdminChampionshipIndexRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/driver/register": {
      id: "/_private/admin/driver/register";
      path: "/admin/driver/register";
      fullPath: "/admin/driver/register";
      preLoaderRoute: typeof PrivateAdminDriverRegisterRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/championship/register": {
      id: "/_private/admin/championship/register";
      path: "/admin/championship/register";
      fullPath: "/admin/championship/register";
      preLoaderRoute: typeof PrivateAdminChampionshipRegisterRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/admin/championship/$id": {
      id: "/_private/admin/championship/$id";
      path: "/admin/championship/$id";
      fullPath: "/admin/championship/$id";
      preLoaderRoute: typeof PrivateAdminChampionshipIdRouteImport;
      parentRoute: typeof PrivateRoute;
    };
  }
}

interface PrivateRouteChildren {
  PrivateAdminDashboardRoute: typeof PrivateAdminDashboardRoute;
  PrivateAdminLoginRoute: typeof PrivateAdminLoginRoute;
  PrivateAdminIndexRoute: typeof PrivateAdminIndexRoute;
  PrivateAdminChampionshipIdRoute: typeof PrivateAdminChampionshipIdRoute;
  PrivateAdminChampionshipRegisterRoute: typeof PrivateAdminChampionshipRegisterRoute;
  PrivateAdminDriverRegisterRoute: typeof PrivateAdminDriverRegisterRoute;
  PrivateAdminChampionshipIndexRoute: typeof PrivateAdminChampionshipIndexRoute;
  PrivateAdminDriverIndexRoute: typeof PrivateAdminDriverIndexRoute;
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateAdminDashboardRoute: PrivateAdminDashboardRoute,
  PrivateAdminLoginRoute: PrivateAdminLoginRoute,
  PrivateAdminIndexRoute: PrivateAdminIndexRoute,
  PrivateAdminChampionshipIdRoute: PrivateAdminChampionshipIdRoute,
  PrivateAdminChampionshipRegisterRoute: PrivateAdminChampionshipRegisterRoute,
  PrivateAdminDriverRegisterRoute: PrivateAdminDriverRegisterRoute,
  PrivateAdminChampionshipIndexRoute: PrivateAdminChampionshipIndexRoute,
  PrivateAdminDriverIndexRoute: PrivateAdminDriverIndexRoute,
};

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren);

interface PublicRouteChildren {
  PublicChampionshipsRoute: typeof PublicChampionshipsRoute;
  PublicDriversRoute: typeof PublicDriversRoute;
  PublicResultsRoute: typeof PublicResultsRoute;
  PublicIndexRoute: typeof PublicIndexRoute;
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicChampionshipsRoute: PublicChampionshipsRoute,
  PublicDriversRoute: PublicDriversRoute,
  PublicResultsRoute: PublicResultsRoute,
  PublicIndexRoute: PublicIndexRoute,
};

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
