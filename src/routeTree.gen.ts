/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as PrivateImport } from './routes/_private'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as PublicResultsImport } from './routes/_public/results'
import { Route as PublicDriversImport } from './routes/_public/drivers'
import { Route as PublicChampionshipsImport } from './routes/_public/championships'
import { Route as PrivateAdminIndexImport } from './routes/_private/admin/index'
import { Route as PrivateAdminLoginImport } from './routes/_private/admin/login'
import { Route as PrivateAdminDashboardImport } from './routes/_private/admin/dashboard'
import { Route as PrivateAdminDriverIndexImport } from './routes/_private/admin/driver/index'
import { Route as PrivateAdminDriverRegisterImport } from './routes/_private/admin/driver/register'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicResultsRoute = PublicResultsImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => PublicRoute,
} as any)

const PublicDriversRoute = PublicDriversImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => PublicRoute,
} as any)

const PublicChampionshipsRoute = PublicChampionshipsImport.update({
  id: '/championships',
  path: '/championships',
  getParentRoute: () => PublicRoute,
} as any)

const PrivateAdminIndexRoute = PrivateAdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateAdminLoginRoute = PrivateAdminLoginImport.update({
  id: '/admin/login',
  path: '/admin/login',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateAdminDashboardRoute = PrivateAdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateAdminDriverIndexRoute = PrivateAdminDriverIndexImport.update({
  id: '/admin/driver/',
  path: '/admin/driver/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateAdminDriverRegisterRoute = PrivateAdminDriverRegisterImport.update(
  {
    id: '/admin/driver/register',
    path: '/admin/driver/register',
    getParentRoute: () => PrivateRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/championships': {
      id: '/_public/championships'
      path: '/championships'
      fullPath: '/championships'
      preLoaderRoute: typeof PublicChampionshipsImport
      parentRoute: typeof PublicImport
    }
    '/_public/drivers': {
      id: '/_public/drivers'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof PublicDriversImport
      parentRoute: typeof PublicImport
    }
    '/_public/results': {
      id: '/_public/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof PublicResultsImport
      parentRoute: typeof PublicImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/_private/admin/dashboard': {
      id: '/_private/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof PrivateAdminDashboardImport
      parentRoute: typeof PrivateImport
    }
    '/_private/admin/login': {
      id: '/_private/admin/login'
      path: '/admin/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof PrivateAdminLoginImport
      parentRoute: typeof PrivateImport
    }
    '/_private/admin/': {
      id: '/_private/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof PrivateAdminIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/admin/driver/register': {
      id: '/_private/admin/driver/register'
      path: '/admin/driver/register'
      fullPath: '/admin/driver/register'
      preLoaderRoute: typeof PrivateAdminDriverRegisterImport
      parentRoute: typeof PrivateImport
    }
    '/_private/admin/driver/': {
      id: '/_private/admin/driver/'
      path: '/admin/driver'
      fullPath: '/admin/driver'
      preLoaderRoute: typeof PrivateAdminDriverIndexImport
      parentRoute: typeof PrivateImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteChildren {
  PrivateAdminDashboardRoute: typeof PrivateAdminDashboardRoute
  PrivateAdminLoginRoute: typeof PrivateAdminLoginRoute
  PrivateAdminIndexRoute: typeof PrivateAdminIndexRoute
  PrivateAdminDriverRegisterRoute: typeof PrivateAdminDriverRegisterRoute
  PrivateAdminDriverIndexRoute: typeof PrivateAdminDriverIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateAdminDashboardRoute: PrivateAdminDashboardRoute,
  PrivateAdminLoginRoute: PrivateAdminLoginRoute,
  PrivateAdminIndexRoute: PrivateAdminIndexRoute,
  PrivateAdminDriverRegisterRoute: PrivateAdminDriverRegisterRoute,
  PrivateAdminDriverIndexRoute: PrivateAdminDriverIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicChampionshipsRoute: typeof PublicChampionshipsRoute
  PublicDriversRoute: typeof PublicDriversRoute
  PublicResultsRoute: typeof PublicResultsRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicChampionshipsRoute: PublicChampionshipsRoute,
  PublicDriversRoute: PublicDriversRoute,
  PublicResultsRoute: PublicResultsRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/championships': typeof PublicChampionshipsRoute
  '/drivers': typeof PublicDriversRoute
  '/results': typeof PublicResultsRoute
  '/': typeof PublicIndexRoute
  '/admin/dashboard': typeof PrivateAdminDashboardRoute
  '/admin/login': typeof PrivateAdminLoginRoute
  '/admin': typeof PrivateAdminIndexRoute
  '/admin/driver/register': typeof PrivateAdminDriverRegisterRoute
  '/admin/driver': typeof PrivateAdminDriverIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PrivateRouteWithChildren
  '/championships': typeof PublicChampionshipsRoute
  '/drivers': typeof PublicDriversRoute
  '/results': typeof PublicResultsRoute
  '/': typeof PublicIndexRoute
  '/admin/dashboard': typeof PrivateAdminDashboardRoute
  '/admin/login': typeof PrivateAdminLoginRoute
  '/admin': typeof PrivateAdminIndexRoute
  '/admin/driver/register': typeof PrivateAdminDriverRegisterRoute
  '/admin/driver': typeof PrivateAdminDriverIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/championships': typeof PublicChampionshipsRoute
  '/_public/drivers': typeof PublicDriversRoute
  '/_public/results': typeof PublicResultsRoute
  '/_public/': typeof PublicIndexRoute
  '/_private/admin/dashboard': typeof PrivateAdminDashboardRoute
  '/_private/admin/login': typeof PrivateAdminLoginRoute
  '/_private/admin/': typeof PrivateAdminIndexRoute
  '/_private/admin/driver/register': typeof PrivateAdminDriverRegisterRoute
  '/_private/admin/driver/': typeof PrivateAdminDriverIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/championships'
    | '/drivers'
    | '/results'
    | '/'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin'
    | '/admin/driver/register'
    | '/admin/driver'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/championships'
    | '/drivers'
    | '/results'
    | '/'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin'
    | '/admin/driver/register'
    | '/admin/driver'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_public/championships'
    | '/_public/drivers'
    | '/_public/results'
    | '/_public/'
    | '/_private/admin/dashboard'
    | '/_private/admin/login'
    | '/_private/admin/'
    | '/_private/admin/driver/register'
    | '/_private/admin/driver/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private",
        "/_public"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/admin/dashboard",
        "/_private/admin/login",
        "/_private/admin/",
        "/_private/admin/driver/register",
        "/_private/admin/driver/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/championships",
        "/_public/drivers",
        "/_public/results",
        "/_public/"
      ]
    },
    "/_public/championships": {
      "filePath": "_public/championships.tsx",
      "parent": "/_public"
    },
    "/_public/drivers": {
      "filePath": "_public/drivers.tsx",
      "parent": "/_public"
    },
    "/_public/results": {
      "filePath": "_public/results.tsx",
      "parent": "/_public"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    },
    "/_private/admin/dashboard": {
      "filePath": "_private/admin/dashboard.tsx",
      "parent": "/_private"
    },
    "/_private/admin/login": {
      "filePath": "_private/admin/login.tsx",
      "parent": "/_private"
    },
    "/_private/admin/": {
      "filePath": "_private/admin/index.tsx",
      "parent": "/_private"
    },
    "/_private/admin/driver/register": {
      "filePath": "_private/admin/driver/register.tsx",
      "parent": "/_private"
    },
    "/_private/admin/driver/": {
      "filePath": "_private/admin/driver/index.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
